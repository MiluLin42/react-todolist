{"version":3,"sources":["App/App.js","index.js"],"names":["TodoContainer","styled","div","Title","h1","TodoAdd","TodoItemWrapper","TodoContent","props","$isDone","TodoButton","TodoItemButton","button","TodoDisplay","DisplayButton","ClearAllButton","TodoItem","todo","handleDeleteTodo","handleToggleIsDone","handleEditClick","isDone","content","onClick","id","App","useState","todos","setTodos","value","setValue","display","setDisplay","isEditing","setIsEditing","editId","setEditId","handleButtonClick","length","alert","map","filter","newTodo","find","e","type","placeholder","onChange","target","onKeyDown","key","all","unDone","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c1af5dbc.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst TodoContainer = styled.div`\n  width: 500px;\n  margin: 0 auto;\n  border: 1px solid #808080;\n  border-radius: 8px;\n`;\n\nconst Title = styled.h1`\n  display: flex;\n  color: #2894ff;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst TodoAdd = styled.div`\n  justify-content: center;\n  display: flex;\n  padding: 8px;\n`;\n\nconst TodoItemWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 8px 16px;\n  border-bottom: 1px solid black;\n`;\n\nconst TodoContent = styled.div`\n  color: #00bfff;\n  ${(props) =>\n    props.$isDone &&\n    `\n    text-decoration: line-through;\n    color: #808080;\n  `}\n`;\n\nconst TodoButton = styled.div``;\n\nconst TodoItemButton = styled.button`\n  padding: 6px;\n  color: black;\n  cursor: pointer;\n\n  &:hover {\n    color: red;\n  }\n\n  & + & {\n    margin-left: 4px;\n  }\n`;\n\nconst TodoDisplay = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst DisplayButton = styled.button`\n  padding: 6px;\n  border: none;\n  cursor: pointer;\n  margin: 6px;\n  background: white;\n\n  & + & {\n    margin-left: 8px;\n  }\n`;\n\nconst ClearAllButton = styled.button`\n  padding: 8px;\n  display: flex;\n  margin: 0 auto;\n  cursor: pointer;\n  background: #52170b;\n  color: #ff0066;\n  border: none;\n  border-radius: 8px;\n`;\n\nfunction TodoItem({\n  todo,\n  handleDeleteTodo,\n  handleToggleIsDone,\n  handleEditClick,\n}) {\n  return (\n    <TodoItemWrapper>\n      <TodoContent $isDone={todo.isDone}>{todo.content}</TodoContent>\n      <TodoButton>\n        <TodoItemButton\n          onClick={() => {\n            handleToggleIsDone(todo.id);\n          }}\n        >\n          {todo.isDone ? \"未完成\" : \"已完成\"}\n        </TodoItemButton>\n        <TodoItemButton\n          onClick={() => {\n            handleEditClick(todo.id);\n          }}\n        >\n          編輯\n        </TodoItemButton>\n        <TodoItemButton\n          onClick={() => {\n            handleDeleteTodo(todo.id);\n          }}\n        >\n          刪除\n        </TodoItemButton>\n      </TodoButton>\n    </TodoItemWrapper>\n  );\n}\n\nlet id = 1;\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [value, setValue] = useState(\"\");\n  const [display, setDisplay] = useState(\"all\");\n  const [isEditing, setIsEditing] = useState(false);\n  const [editId, setEditId] = useState(null);\n\n  const DISPLAY_MAP = {\n    all: (todo) => todo,\n    isDone: (todo) => todo.isDone,\n    unDone: (todo) => !todo.isDone,\n  };\n\n  const handleButtonClick = () => {\n    if (value === \"\" || value.length > 20)\n      return alert(\"請勿為空、文字請控制在 20 字元內\");\n    if (editId) {\n      setTodos(\n        todos.map((todo) => {\n          if (todo.id === editId) {\n            return {\n              ...todo,\n              content: value,\n            };\n          }\n          return todo;\n        })\n      );\n      setIsEditing(false);\n      setEditId(null);\n    } else {\n      setTodos([\n        {\n          id,\n          content: value,\n          isDone: false,\n        },\n        ...todos,\n      ]);\n    }\n    setValue(\"\");\n    id++;\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      handleButtonClick();\n    }\n  };\n\n  const handleInputChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  const handleDeleteTodo = (id) => {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  };\n\n  const handleToggleIsDone = (id) => {\n    setTodos(\n      todos.map((todo) => {\n        if (todo.id !== id) return todo;\n        return {\n          ...todo,\n          isDone: !todo.isDone,\n        };\n      })\n    );\n  };\n\n  const handleEditClick = (id) => {\n    let newTodo = todos.find((e) => e.id === id);\n    setIsEditing(true);\n    setValue(newTodo.content);\n    setEditId(id);\n  };\n\n  const displayAll = () => {\n    setDisplay(\"all\");\n  };\n\n  const displayIsDone = () => {\n    setDisplay(\"isDone\");\n  };\n\n  const displayUnDone = () => {\n    setDisplay(\"unDone\");\n  };\n\n  const clearAll = () => {\n    setTodos([]);\n  };\n\n  return (\n    <TodoContainer>\n      <Title>Todo List</Title>\n      <TodoAdd>\n        <input\n          type=\"text\"\n          placeholder=\"新增代辦事項\"\n          value={value}\n          onChange={handleInputChange}\n          onKeyDown={handleKeyDown}\n        />\n        {isEditing ? (\n          <button onClick={handleButtonClick}>更新</button>\n        ) : (\n          <button onClick={handleButtonClick}>提交</button>\n        )}\n      </TodoAdd>\n      {todos.filter(DISPLAY_MAP[display]).map((todo) => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          handleDeleteTodo={handleDeleteTodo}\n          handleToggleIsDone={handleToggleIsDone}\n          handleEditClick={handleEditClick}\n        />\n      ))}\n      <TodoDisplay>\n        <DisplayButton onClick={displayAll}>全部</DisplayButton>\n        <DisplayButton onClick={displayIsDone}>已完成</DisplayButton>\n        <DisplayButton onClick={displayUnDone}>未完成</DisplayButton>\n      </TodoDisplay>\n      <ClearAllButton onClick={clearAll}>清空全部</ClearAllButton>\n    </TodoContainer>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}